#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

frontend  atomic-openshift-ignition
    bind *:22623
    default_backend atomic-openshift-ignition
    mode tcp
    option tcplog

frontend  atomic-openshift-api
    bind *:6443
    default_backend atomic-openshift-api
    mode tcp
    option tcplog

frontend  https-in
    bind *:443
    default_backend atomic-openshift-router-ssl
    mode tcp
    option tcplog
    tcp-request  inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }

backend atomic-openshift-ignition
    balance source
    mode tcp
      server     {{ bootstrap-0 }} {{ bootstrap_ip }}:6443 check
    {% for ip, hostname in master_details.items() %}
      server     {{ hostname }} {{ ip }}:22623 check
    {% endfor %}

backend atomic-openshift-api
    balance source
    mode tcp
      server     bootstrap-0 {{ bootstrap_ip }}:6443 check
    {% for ip, hostname in master_details.items() %}
      server     {{ hostname }} {{ ip }}:6443 check
    {% endfor %}

backend atomic-openshift-router-ssl
    balance source
    mode tcp
    # maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m
    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2
    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello
    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello
    stick on payload_lv(43,1) if clienthello
    # Learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello
    option ssl-hello-chk
    {% if ansible_fqdn in groups.loadbalancers_internet_dataplane %}
    {% for ip, hostname in infrastructure_node_details.items() %}
      server     {{ hostname }} {{ ip }}:443 check send-proxy-v2-ssl
    {% endfor %}
    {% elif ansible_fqdn in groups.loadbalancers_net2_dataplane %}
    {% for ip, hostname in worker_details_net2.items() %}
      server     {{ hostname }} {{ ip }}:443 check send-proxy-v2-ssl
    {% endfor %}
    {% else %}
    {% for ip, hostname in infrastructure_node_details.items() %}
      server     {{ hostname }} {{ ip }}:443 check send-proxy-v2-ssl
    {% endfor %}
    {% endif %}
